unit TDataAnnotations;

interface

uses
  System.Classes,System.Rtti, Vcl.Controls;

type
Required=class(TCustomAttribute)
  private
    FErroMessage: string;
  public
    property ErroMessage: string read FErroMessage;

    procedure Validar(const AField : TRttiField; const Objeto : TObject);
    constructor Create(const AErroMessage : string);
end;

StringLenth=class(TCustomAttribute)
  private
    FErroMessage: string;
  public
    property ErroMessage: string read FErroMessage;

    procedure Validar(const AField : TRttiField; const Objeto : TObject);
    constructor Create(const AMinLenth,AMaxLenth : Integer;  const AErroMessage : string);
end;

MaxMinValue=class(TCustomAttribute)
  private
    FErroMessage: string;
  public
    property ErroMessage: string read FErroMessage write FErroMessage;

    procedure Validar(const AField : TRttiField; const Objeto : TObject);
    constructor Create(const AMinValue,AMaxValue : double; const AErroMessage : string);
end;

TObterValores = class
  public
    class function GetText(AComponent : TComponent):string;
end;

implementation

uses
  Vcl.StdCtrls, System.SysUtils;

{ Required }

constructor Required.Create(const AErroMessage: string);
begin
    FErroMessage := AErroMessage;
end;

procedure Required.Validar(const AField: TRttiField; const Objeto: TObject);
var
  LComponent : TComponent;
begin
    LComponent := AField.GetValue(Objeto).AsObject as TComponent;
    if TObterValores.GetText(LComponent) = '' then
      raise Exception.Create(AField.Name+' Não pode ser vazio"');
end;

{ StringLenth }

constructor StringLenth.Create(const AMinLenth, AMaxLenth: Integer;
  const AErroMessage: string);
begin
    FErroMessage := AErroMessage;
end;

procedure StringLenth.Validar(const AField: TRttiField; const Objeto: TObject);
var
  LComponent : TComponent;
begin
    LComponent := AField.GetValue(Objeto).AsObject as TComponent;
    if TObterValores.GetText(LComponent) = '' then
      raise Exception.Create(AField.Name+' Não pode ser vazio"');
end;


{ MaxMinValue }

constructor MaxMinValue.Create(const AMinValue, AMaxValue: double;
  const AErroMessage: string);
begin
    ErroMessage := AErroMessage;
end;

procedure MaxMinValue.Validar(const AField: TRttiField; const Objeto: TObject);
var
  LComponent : TComponent;
begin
    LComponent := AField.GetValue(Objeto).AsObject as TComponent;
end;

{ TObterValores }

class function TObterValores.GetText(AComponent: TComponent): string;
begin
    Result := '';
    if AComponent is TEdit then
       Result := TEdit(AComponent).Text;

    if AComponent is TMemo then
       Result := TMemo(AComponent).Text;

    if AComponent is TComboBox then
       Result := TComboBox(AComponent).Text;
end;

end.
